{"version":3,"sources":["../index.ts"],"sourcesContent":["import type { NextFunction, Request, Response } from 'express';\nimport { getClientIp } from 'request-ip';\n\nimport type { OpenpanelSdkOptions } from '@openpanel/sdk';\nimport { OpenpanelSdk } from '@openpanel/sdk';\n\nexport * from '@openpanel/sdk';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Express {\n    export interface Request {\n      op: OpenpanelSdk;\n    }\n  }\n}\n\nexport type OpenpanelOptions = OpenpanelSdkOptions & {\n  trackRequest?: (url: string) => boolean;\n  getProfileId?: (req: Request) => string;\n};\n\nexport default function createMiddleware(options: OpenpanelOptions) {\n  return function middleware(req: Request, res: Response, next: NextFunction) {\n    const sdk = new OpenpanelSdk(options);\n    const ip = getClientIp(req);\n    if (ip) {\n      sdk.api.headers['x-forwarded-for'] = ip;\n    }\n\n    if (options.getProfileId) {\n      const profileId = options.getProfileId(req);\n      if (profileId) {\n        sdk.setProfileId(profileId);\n      }\n    }\n\n    if (options.trackRequest?.(req.url)) {\n      sdk.event('request', {\n        url: req.url,\n        method: req.method,\n        query: req.query,\n      });\n    }\n\n    req.op = sdk;\n\n    return next();\n  };\n}\n"],"mappings":"2dAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAA4B,sBAG5BC,EAA6B,0BAE7BC,EAAAN,EAAc,0BANd,gBAsBe,SAARE,EAAkCK,EAA2B,CAClE,OAAO,SAAoBC,EAAcC,EAAeC,EAAoB,CAC1E,IAAMC,EAAM,IAAI,eAAaJ,CAAO,EAC9BK,KAAK,eAAYJ,CAAG,EAK1B,GAJII,IACFD,EAAI,IAAI,QAAQ,iBAAiB,EAAIC,GAGnCL,EAAQ,aAAc,CACxB,IAAMM,EAAYN,EAAQ,aAAaC,CAAG,EACtCK,GACFF,EAAI,aAAaE,CAAS,CAE9B,CAEA,OAAIN,EAAQ,eAAeC,EAAI,GAAG,GAChCG,EAAI,MAAM,UAAW,CACnB,IAAKH,EAAI,IACT,OAAQA,EAAI,OACZ,MAAOA,EAAI,KACb,CAAC,EAGHA,EAAI,GAAKG,EAEFD,EAAK,CACd,CACF","names":["express_exports","__export","createMiddleware","__toCommonJS","import_request_ip","import_sdk","__reExport","options","req","res","next","sdk","ip","profileId"]}
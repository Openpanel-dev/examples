{"version":3,"sources":["../index.ts"],"sourcesContent":["export interface OpenpanelEventOptions {\n  profileId?: string;\n}\n\nexport interface PostEventPayload {\n  name: string;\n  timestamp: string;\n  deviceId?: string;\n  profileId?: string;\n  properties?: Record<string, unknown> & OpenpanelEventOptions;\n}\n\nexport interface UpdateProfilePayload {\n  profileId: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  avatar?: string;\n  properties?: Record<string, unknown>;\n}\n\nexport interface IncrementProfilePayload {\n  profileId: string;\n  property: string;\n  value: number;\n}\n\nexport interface DecrementProfilePayload {\n  profileId?: string;\n  property: string;\n  value: number;\n}\n\nexport interface OpenpanelSdkOptions {\n  url?: string;\n  clientId: string;\n  clientSecret?: string;\n  verbose?: boolean;\n  setDeviceId?: (deviceId: string) => void;\n  getDeviceId?: () => string | null | undefined;\n  removeDeviceId?: () => void;\n}\n\nexport interface OpenpanelState {\n  deviceId?: string;\n  profileId?: string;\n  properties: Record<string, unknown>;\n}\n\nfunction awaitProperties(\n  properties: Record<string, string | Promise<string | null>>\n): Promise<Record<string, string>> {\n  return Promise.all(\n    Object.entries(properties).map(async ([key, value]) => {\n      return [key, (await value) ?? ''];\n    })\n  ).then((entries) => Object.fromEntries(entries));\n}\n\nfunction createApi(_url: string) {\n  const headers: Record<string, string | Promise<string | null>> = {\n    'Content-Type': 'application/json',\n  };\n  return {\n    headers,\n    async fetch<ReqBody, ResBody>(\n      path: string,\n      data: ReqBody,\n      options?: RequestInit\n    ): Promise<ResBody | null> {\n      const url = `${_url}${path}`;\n      let timer: ReturnType<typeof setTimeout>;\n      const h = await awaitProperties(headers);\n      return new Promise((resolve) => {\n        const wrappedFetch = (attempt: number) => {\n          clearTimeout(timer);\n          fetch(url, {\n            headers: h,\n            method: 'POST',\n            body: JSON.stringify(data ?? {}),\n            keepalive: true,\n            ...(options ?? {}),\n          })\n            .then(async (res) => {\n              if (res.status === 401) {\n                return null;\n              }\n\n              if (res.status !== 200 && res.status !== 202) {\n                return retry(attempt, resolve);\n              }\n\n              const response = await res.text();\n\n              if (!response) {\n                return resolve(null);\n              }\n\n              resolve(response as ResBody);\n            })\n            .catch(() => {\n              return retry(attempt, resolve);\n            });\n        };\n\n        function retry(\n          attempt: number,\n          resolve: (value: ResBody | null) => void\n        ) {\n          if (attempt > 1) {\n            return resolve(null);\n          }\n\n          timer = setTimeout(\n            () => {\n              wrappedFetch(attempt + 1);\n            },\n            Math.pow(2, attempt) * 500\n          );\n        }\n\n        wrappedFetch(0);\n      });\n    },\n  };\n}\n\nexport class OpenpanelSdk<\n  Options extends OpenpanelSdkOptions = OpenpanelSdkOptions,\n> {\n  public options: Options;\n  public api: ReturnType<typeof createApi>;\n  private state: OpenpanelState = {\n    properties: {},\n  };\n\n  constructor(options: Options) {\n    this.options = options;\n    this.api = createApi(options.url ?? 'https://api.openpanel.dev');\n    this.api.headers['openpanel-client-id'] = options.clientId;\n    if (this.options.clientSecret) {\n      this.api.headers['openpanel-client-secret'] = this.options.clientSecret;\n    }\n  }\n\n  // Public\n\n  public setProfileId(profileId: string) {\n    this.state.profileId = profileId;\n  }\n\n  public setProfile(payload: UpdateProfilePayload) {\n    this.setProfileId(payload.profileId);\n    this.api.fetch<UpdateProfilePayload, string>('/profile', {\n      ...payload,\n      properties: {\n        ...this.state.properties,\n        ...payload.properties,\n      },\n    });\n  }\n\n  public increment(\n    property: string,\n    value: number,\n    options?: OpenpanelEventOptions\n  ) {\n    const profileId = options?.profileId ?? this.state.profileId;\n    if (!profileId) {\n      return console.log('No profile id');\n    }\n    this.api.fetch<IncrementProfilePayload, string>('/profile/increment', {\n      profileId,\n      property,\n      value,\n    });\n  }\n\n  public decrement(\n    property: string,\n    value: number,\n    options?: OpenpanelEventOptions\n  ) {\n    const profileId = options?.profileId ?? this.state.profileId;\n    if (!profileId) {\n      return console.log('No profile id');\n    }\n    this.api.fetch<DecrementProfilePayload, string>('/profile/decrement', {\n      profileId,\n      property,\n      value,\n    });\n  }\n\n  public event(name: string, properties?: PostEventPayload['properties']) {\n    const profileId = properties?.profileId ?? this.state.profileId;\n    delete properties?.profileId;\n    this.api\n      .fetch<PostEventPayload, string>('/event', {\n        name,\n        properties: {\n          ...this.state.properties,\n          ...(properties ?? {}),\n        },\n        timestamp: this.timestamp(),\n        deviceId: this.getDeviceId(),\n        profileId,\n      })\n      .then((deviceId) => {\n        if (this.options.setDeviceId && deviceId) {\n          this.options.setDeviceId(deviceId);\n        }\n      });\n  }\n\n  public setGlobalProperties(properties: Record<string, unknown>) {\n    this.state.properties = {\n      ...this.state.properties,\n      ...properties,\n    };\n  }\n\n  public clear() {\n    this.state.deviceId = undefined;\n    this.state.profileId = undefined;\n    if (this.options.removeDeviceId) {\n      this.options.removeDeviceId();\n    }\n  }\n\n  // Private\n\n  private timestamp() {\n    return new Date().toISOString();\n  }\n\n  private getDeviceId() {\n    if (this.state.deviceId) {\n      return this.state.deviceId;\n    } else if (this.options.getDeviceId) {\n      this.state.deviceId = this.options.getDeviceId() || undefined;\n    }\n  }\n}\n"],"mappings":"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","names":["sdk_exports","__export","OpenpanelSdk","__toCommonJS","awaitProperties","properties","key","value","entries","createApi","_url","headers","path","data","options","url","timer","resolve","wrappedFetch","attempt","res","retry","response","profileId","payload","property","name","deviceId"]}